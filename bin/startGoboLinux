#!/bin/ash

/bin/mount -t proc  none /proc

echo "Mounting GoboLinux Install CD..."
/bin/mountGoboLinux 

if [ -f /Mount/CD-ROM/Root-RW.ext2 ]
then
   echo "Using Root-RW.ext2 for RW Layer..."
   mount -o loop,noatime,rw -t ext2 /Mount/CD-ROM/Root-RW.ext2 /Mount/UnionFS
else
   echo "Preparing TmpFS RW Layer..."
   /bin/mount -t tmpfs none /Mount/UnionFS
   mkdir -p /Mount/UnionFS/root
   mkdir -p /Mount/UnionFS/work
fi

echo "Initializing GoboLinux squashfs files..."

# Mounting Packages*.squashfs files inside /Mount/SquashFS
mount -t tmpfs none /Mount/SquashFS
mkdir /Mount/SquashFS/Rest
mkdir /Mount/SquashFS/Files
mkdir /Mount/SquashFS/Aliens

unset unmanaged
unset lowerdirs
for i in /Mount/CD-ROM/Packages*.squashfs
do
    squashdir=`basename $i .squashfs`
    mkdir /Mount/SquashFS/$squashdir
    mount -o loop,ro -t squashfs $i /Mount/SquashFS/$squashdir
    if [ -z "$lowerdirs" ]
    then lowerdirs="/Mount/SquashFS/$squashdir"
    else lowerdirs="$lowerdirs:/Mount/SquashFS/$squashdir"
    fi
done

# Mounting 'GoboLinux-{rest,files}.squashfs' (still harcoded names)
mount -o loop,ro -t squashfs /Mount/CD-ROM/GoboLinux-rest.squashfs  /Mount/SquashFS/Rest
mount -o loop,ro -t squashfs /Mount/CD-ROM/GoboLinux-files.squashfs /Mount/SquashFS/Files
mount -o loop,ro -t squashfs /Mount/CD-ROM/GoboLinux-aliens.squashfs /Mount/SquashFS/Aliens

lowerdirs="${lowerdirs}:/Mount/SquashFS/Rest:/Mount/SquashFS/Files:/Mount/SquashFS/Aliens"
upperdir="/Mount/UnionFS/root"
workdir="/Mount/UnionFS/work"

grep -q overlay /proc/filesystems || modprobe overlay
echo "Union-mounting directories"
mount -t overlay overlay -o "lowerdir=$lowerdirs,upperdir=$upperdir,workdir=$workdir" /Mount/TmpFS

echo "Installing unmanaged files"
for pkg in /Mount/TmpFS/Programs/*
do
   unmanageddir="$pkg/Current/Resources/Unmanaged"
   [ ! -d "$unmanageddir" ] && continue
   if [ $(basename "$pkg") = "Linux" ]
   then
      # These files are way too big to be copied.
      mount -o bind "$unmanageddir/System/Kernel/Boot" /Mount/TmpFS/System/Kernel/Boot
      mount -o bind "$unmanageddir/System/Kernel/Modules" /Mount/TmpFS/System/Kernel/Modules
   elif [ $(basename "$pkg") = "Linux-Firmware" ]
   then
      # These files are way too big to be copied, too.
      lndir="$(echo $unmanageddir | sed 's,/Mount/TmpFS,,g')/System/Index/lib/firmware"
      mkdir -p /Mount/TmpFS/System/Index/lib/firmware/
      for i in "/Mount/TmpFS${lndir}"/*
      do
          bname=$(basename $i)
          ln -fs $lndir/$bname /Mount/TmpFS/System/Index/lib/firmware/$bname
      done
   else
      cp -r "$unmanageddir/"* /Mount/TmpFS/ 
   fi
done

echo "Performing pivot_root..."
cd /Mount/TmpFS
/bin/pivot_root . Mount/.Pivot

# ensure that the inittab from LiveCD is used. this is later replaced
# by the StartLiveCD script from the LiveCD package.
ln -nfs /Programs/LiveCD/Settings/inittab /System/Settings/inittab

# use the devtmpfs filesystem from the old root filesystem
mount -o bind /Mount/.Pivot/dev /dev

echo "Invoking init..."
exec /sbin/init
echo "Done."
